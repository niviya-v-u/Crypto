import java.util.Scanner;

public class AffineCipher {

   
    public static int modInverse(int a, int m) {
        a = a % m;
        for (int x = 1; x < m; x++) {
            if ((a * x) % m == 1) {
                return x;
            }
        }
        return -1; // If no inverse exists
    }

    // Encrypt the plaintext using the Affine Cipher
    public static String encrypt(String plaintext, int a, int b) {
        StringBuilder encryptedText = new StringBuilder();
        for (char character : plaintext.toCharArray()) {
            if (Character.isLetter(character)) {
                char base = Character.isUpperCase(character) ? 'A' : 'a';
                int x = character - base; // Convert letter to numeric equivalent
                int encrypted = (a * x + b) % 26; // Apply the encryption formula
                encryptedText.append((char) (encrypted + base)); // Convert back to character
            } else {
                encryptedText.append(character); // Keep non-alphabetic characters unchanged
            }
        }
        return encryptedText.toString();
    }

    // Decrypt the ciphertext using the Affine Cipher
    public static String decrypt(String ciphertext, int a, int b) {
        StringBuilder decryptedText = new StringBuilder();
        int aInverse = modInverse(a, 26); // Calculate modular inverse of 'a'
        if (aInverse == -1) {
            return "Invalid key 'a'; it must be coprime with 26.";
        }
        for (char character : ciphertext.toCharArray()) {
            if (Character.isLetter(character)) {
                char base = Character.isUpperCase(character) ? 'A' : 'a';
                int y = character - base; // Convert letter to numeric equivalent
                int decrypted = (aInverse * (y - b + 26)) % 26; // Apply the decryption formula
                decryptedText.append((char) (decrypted + base)); // Convert back to character
            } else {
                decryptedText.append(character); // Keep non-alphabetic characters unchanged
            }
        }
        return decryptedText.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input plaintext
        System.out.println("Enter the plaintext to encrypt:");
        String plaintext = scanner.nextLine().toUpperCase(); // Convert to uppercase for simplicity

        // Input the keys
        System.out.println("Enter the key 'a' (must be coprime with 26):");
        int a = scanner.nextInt();
        System.out.println("Enter the key 'b':");
        int b = scanner.nextInt();

        // Validate the key 'a'
        if (modInverse(a, 26) == -1) {
            System.out.println("Invalid key 'a'. It must be coprime with 26.");
            return;
        }

        // Encrypt the plaintext
        String encryptedText = encrypt(plaintext, a, b);
        System.out.println("Encrypted Text: " + encryptedText);

        // Decrypt the ciphertext
        String decryptedText = decrypt(encryptedText, a, b);
        System.out.println("Decrypted Text: " + decryptedText);

        scanner.close();
    }
}
